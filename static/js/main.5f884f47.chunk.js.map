{"version":3,"sources":["Game/Canvas.tsx","Game/Node.tsx","Game/rules.ts","Game/Grid.tsx","Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Drawing","canvas","isAutoDrawn","ctx","currentFrame","this","drawings","push","slice","indexOf","Canvas","props","lastFrameTime","FRAMES_PER_SECOND","FRAME_MIN_TIME","frameTime","state","document","getElementById","rescaleCanvas","getContext","window","addEventListener","requestAnimationFrame","draw","bind","time","clearRect","width","height","advanceFrame","drawing","innerWidth","innerHeight","id","Component","Tile","x","y","_nodes","sort","a","b","objectsWithWalking","objectName","value","Node","text","startDirection","isPlayer","_isPushable","rules","_lastDirection","xP","yP","objectsWithDirections","isText","objectNames","toLowerCase","verbNames","qualityNames","rule","direction","objectColors","Rules","grid","rulesText","innerText","i","nodes","length","curNode","isText_Object","node1","isText_Verb","node2","isText_Quality","addRule","Array","from","Set","resetAllNodeRules","split","qualityName","nodesWithObjectName","node","undoActions","changeTo","changeOn","undoStep","doAfterMove","newObjectName","playerPositions","skip","isPushable","AnimatedImage","imageName","resolution","currentDirection","lastDirection","extraWalking","xLastFrame","yLastFrame","offset","hasWalking","hasDirections","paletteData","initializeDrawings","j","undefined","palette","Image","src","onload","img","includes","createElement","drawImage","getImageData","imageSmoothingEnabled","imageData","imgData","data","posForColor","canvas2","ctx2","putImageData","console","log","Grid","gridImage","active","undoMoves","didMoveThisStep","loadAllImages","setOffset","initializeGrid","updateRules","calculateText","key","Object","keys","drawGrid","currentY","e","posX","clientX","posY","clientY","gridPos","Math","floor","prompt","movedNodes","is","xyP","directionToXAndY","canMoveIntoNode","some","filter","playerNode","movedNode","moveNode","nextNode","skipMoveCheck","skipAddUndoCheck","reverseDirection","curTile","nextTile","splice","findIndex","doAction","getDrawing","beginPath","moveTo","lineTo","stroke","Game","canMove","justUndone","interval","keyDetectDown","keyDetectUp","shift","doExtra","pos","findPlayerNode","find","v","doMovement","howManyRulesNotYou","setTimeout","error","undoMove","undoAction","repeat","movePlayers","setInterval","clearInterval","style","position","top","onClick","left","textAlign","ref","el","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5f884f47.chunk.js","sourcesContent":["import {Component} from \"react\";\r\n\r\nexport class Drawing {\r\n    public canvas: Canvas;\r\n    public ctx: CanvasRenderingContext2D;\r\n    public currentFrame: number = 1;\r\n    public isAutoDrawn: boolean;\r\n    constructor(canvas: Canvas, isAutoDrawn: boolean = true) {\r\n        this.canvas = canvas;\r\n        this.isAutoDrawn = isAutoDrawn;\r\n        this.canvas.drawings.push(this);\r\n        this.ctx = canvas.ctx;\r\n    }\r\n\r\n    draw() {\r\n\r\n    }\r\n\r\n    remove() {\r\n        this.canvas.drawings.slice(this.canvas.drawings.indexOf(this), 1)\r\n    }\r\n}\r\n\r\nexport default class Canvas extends Component {\r\n\r\n    public drawings: Array<Drawing> = []\r\n\r\n    public canvas!: any\r\n    public ctx! : CanvasRenderingContext2D ;\r\n\r\n    private lastFrameTime!: number;\r\n    public FRAMES_PER_SECOND: number = 60;\r\n    private readonly FRAME_MIN_TIME;\r\n    public frameTime: number = 0;\r\n\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {}\r\n        this.FRAME_MIN_TIME = (1000/60) * (60 / this.FRAMES_PER_SECOND) - (1000/60) * 0.5;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.canvas = document.getElementById(\"canvas\");\r\n        this.rescaleCanvas()\r\n        this.ctx = this.canvas!.getContext(\"2d\")\r\n        window.addEventListener(\"resize\", this.rescaleCanvas)\r\n        window.requestAnimationFrame(this.draw.bind(this))\r\n    }\r\n\r\n    draw(time: number) {\r\n        const deltaTime = time - this.lastFrameTime\r\n        if (deltaTime < this.FRAME_MIN_TIME) {\r\n            window.requestAnimationFrame(this.draw.bind(this));\r\n            return;\r\n        }\r\n\r\n        this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)\r\n        this.lastFrameTime = time;\r\n\r\n        this.frameTime+=(1/(this.FRAMES_PER_SECOND))\r\n        let advanceFrame = false;\r\n        if((this.frameTime % 1) > 0.25){\r\n            this.frameTime = 0;\r\n            advanceFrame = true;\r\n        }\r\n\r\n        for (const drawing of this.drawings) {\r\n            if(drawing.isAutoDrawn) {\r\n                drawing.draw()\r\n            }\r\n            if(advanceFrame) {\r\n                if(drawing.currentFrame !== 3) {\r\n                    drawing.currentFrame++;\r\n                } else  {\r\n                    drawing.currentFrame = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(this.draw.bind(this))\r\n    }\r\n\r\n    rescaleCanvas() {\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas id={\"canvas\"}/>\r\n        )\r\n    }\r\n}","\r\nexport default class Tile {\r\n    public x:number;\r\n    public y:number;\r\n    private _nodes:Array<Node> = []\r\n\r\n    get nodes(): Array<Node> {\r\n        return this._nodes.sort((a,b) => {\r\n            if(objectsWithWalking.indexOf(a.objectName) !== -1 && objectsWithWalking.indexOf(b.objectName) !== -1) {\r\n                return 0;\r\n            }\r\n            if(objectsWithWalking.indexOf(a.objectName) !== -1) {\r\n                return 1;\r\n            }\r\n            if(objectsWithWalking.indexOf(b.objectName) !== -1) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    set nodes(value: Array<Node>) {\r\n        this._nodes = value;\r\n    }\r\n\r\n    constructor(x:number, y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport class Node {\r\n    // Text\r\n    get isText(): boolean {\r\n        return this.text !== \"\";\r\n    }\r\n\r\n\r\n    get isPushable(): boolean {\r\n        if(this.isText) return true;\r\n        return this._isPushable;\r\n    }\r\n\r\n    set isPushable(value: boolean) {\r\n        this._isPushable = value;\r\n    }\r\n\r\n    // Is object, verb or quality\r\n    get isText_Object(): boolean {\r\n        return objectNames.indexOf(this.text.toLowerCase()) !== -1;\r\n    }\r\n    get isText_Verb(): boolean {\r\n        return verbNames.indexOf(this.text.toLowerCase()) !== -1;\r\n    }\r\n    get isText_Quality(): boolean {\r\n        return qualityNames.indexOf(this.text.toLowerCase()) !== -1;\r\n    }\r\n\r\n    is(rule: string): boolean {\r\n        return this.rules.indexOf(rule) !== -1;\r\n    }\r\n\r\n    lastDirection():number {\r\n        if(this.xP === 0 && this.yP === -1) {\r\n            this._lastDirection = 0;\r\n            return 0;\r\n        }\r\n        if(this.xP === 1 && this.yP === 0) {\r\n            this._lastDirection = 1;\r\n            return 1;\r\n        }\r\n        if(this.xP === 0 && this.yP === 1) {\r\n            this._lastDirection = 2;\r\n            return 2;\r\n        }\r\n        if(this.xP === -1 && this.yP === 0) {\r\n            this._lastDirection = 3;\r\n            return 3;\r\n        }\r\n        return this._lastDirection;\r\n    }\r\n\r\n    directionToXAndY(direction: number): {xP:number, yP:number} {\r\n        if(direction === 0) {\r\n            return {xP: 0, yP: -1}\r\n        }\r\n        if(direction === 1) {\r\n            return {xP: 1, yP: 0}\r\n        }\r\n        if(direction === 2) {\r\n            return {xP: 0, yP: 1}\r\n        }\r\n        if(direction === 3) {\r\n            return {xP: -1, yP: 0}\r\n        }\r\n        return {xP: 0, yP: 0}\r\n    }\r\n\r\n    public x: number;\r\n    public y: number;\r\n    public text: string;\r\n    public isPlayer: boolean = false;\r\n    private _isPushable: boolean = false;\r\n    public objectName: string;\r\n    public rules: Array<string> = [];\r\n    private _lastDirection: number = 1;\r\n\r\n    xP: number = 0;\r\n    yP: number = 0;\r\n\r\n    constructor(x:number,y:number, text:string = \"\", objectName:string = \"\", startDirection:number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = text;\r\n        this.objectName = objectName\r\n        if(startDirection === 1 && objectsWithDirections.indexOf(objectName) !== -1) {\r\n            this._lastDirection = 2;\r\n        } else {\r\n            this._lastDirection = startDirection;\r\n        }\r\n    }\r\n}\r\n\r\nexport const objectColors: {[key:string]: {x:number, y:number}} = {\r\n    \"keke\": {x:2,y:2},\r\n    \"text_keke\": {x:2,y:2},\r\n    \"me\": {x:3,y:1},\r\n    \"text_me\": {x:3,y:1},\r\n    \"text_babu\": {x:4,y:1},\r\n    \"text_you\": {x:4,y:1},\r\n    \"skull\": {x:2,y:1},\r\n    \"text_push\": {x:6,y:1},\r\n    \"text_stop\": {x:5,y:1},\r\n    \"text_is\": {x:0,y:3},\r\n    \"babu\": {x:0,y:3},\r\n    \"belt\": {x:1,y:1},\r\n    \"text_belt\": {x:1,y:3},\r\n    \"text_shift\": {x:1,y:3},\r\n    \"text_move\": {x:5,y:3},\r\n    \"text_defeat\": {x:2,y:1},\r\n    \"wall\": {x:1,y:1},\r\n    \"text_wall\": {x:0,y:1},\r\n}\r\n\r\nexport const objectsWithDirections = [\r\n    \"skull\",\r\n    \"belt\",\r\n]\r\n\r\nexport const objectsWithWalking = [\r\n    \"babu\",\r\n    \"keke\",\r\n    \"me\",\r\n]\r\n\r\nexport const objectNames = [\r\n    \"babu\",\r\n    \"keke\",\r\n    \"me\",\r\n    \"skull\",\r\n    \"belt\",\r\n    \"wall\"\r\n]\r\n\r\nexport const verbNames = [\r\n    \"is\",\r\n    \"and\"\r\n]\r\n\r\nexport const qualityNames = [\r\n    \"you\",\r\n    \"push\",\r\n    \"stop\",\r\n    \"defeat\",\r\n    \"move\",\r\n    \"shift\"\r\n]","import Grid from \"./Grid\";\r\nimport {objectNames} from \"./Node\";\r\n\r\nexport default class Rules {\r\n    public grid: Grid;\r\n    public rules: Array<string> = [];\r\n\r\n    constructor(grid: Grid) {\r\n        this.grid = grid;\r\n    }\r\n\r\n    updateRules() {\r\n        this.rules = [];\r\n        const grid = this.grid.grid;\r\n        const rulesText = document.getElementById(\"rules-text\")\r\n        if(rulesText != null) {\r\n            rulesText.innerText = \"\"\r\n        }\r\n        // convert every rule in blocks on the grid into an array with rules\r\n        for (let y = 0; y < this.grid.height; y++) {\r\n            for (let x = 0; x < this.grid.width; x++) {\r\n                for (let i = 0; i < grid[y][x].nodes.length; i++) {\r\n                    const curNode = grid[y][x].nodes[i];\r\n                    if(curNode.isText_Object) {\r\n                        if(x+1 !< this.grid.width && x+2 !< this.grid.width) {\r\n                            for (const node1 of grid[y][x+1].nodes) {\r\n                                if(node1.isText_Verb) {\r\n                                    for (const node2 of grid[y][x+2].nodes) {\r\n                                        if (node2.isText_Quality || node2.isText_Object) {\r\n                                            this.addRule(curNode.text + \" \" + node1.text + \" \" + node2.text)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if(y+1 !< this.grid.height && y+2 !< this.grid.height) {\r\n                            for (const node1 of grid[y+1][x].nodes) {\r\n                                if(node1.isText_Verb) {\r\n                                    for (const node2 of grid[y+2][x].nodes) {\r\n                                        if (node2.isText_Quality || node2.isText_Object) {\r\n                                            this.addRule(curNode.text + \" \" + node1.text + \" \" + node2.text)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Removes duplicates from rules array\r\n        this.rules = Array.from(new Set(this.rules))\r\n\r\n        this.resetAllNodeRules()\r\n\r\n        // go though every rule\r\n        for (const rule of this.rules) {\r\n            const rules = rule.split(\" \");\r\n            // like baba\r\n            const objectName = rules[0];\r\n            // like you or stop\r\n            const qualityName = rules[2];\r\n\r\n            let nodesWithObjectName = [];\r\n            for (let y = 0; y < this.grid.height; y++) {\r\n                for (let x = 0; x < this.grid.width; x++) {\r\n                    for (let i = 0; i < this.grid.grid[y][x].nodes.length; i++) {\r\n                        const node = this.grid.grid[y][x].nodes[i]\r\n                        if (node.objectName === objectName) {\r\n                            nodesWithObjectName.push(node)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (const node of nodesWithObjectName) {\r\n                if(objectNames.indexOf(qualityName) !== -1) {\r\n                    // this.grid.playerPositions = []\r\n\r\n                    this.grid.undoActions.push({node: node, changeTo: node.objectName, changeOn: this.grid.undoStep+1})\r\n\r\n                    this.grid.doAfterMove.push({node: node, newObjectName: qualityName })\r\n                }\r\n                switch (qualityName) {\r\n                    case \"you\": {\r\n                        node.isPlayer = true;\r\n                        this.grid.playerPositions.push({x:node.x,y:node.y, skip:false});\r\n                        break;\r\n                    }\r\n                    case \"push\": {\r\n                        node.isPushable = true;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        node.rules.push(qualityName)\r\n                        break;\r\n                    }\r\n\r\n                }\r\n            }\r\n            if(rulesText != null) {\r\n                rulesText.innerText += rule+\"\\n\";\r\n            }\r\n        }\r\n    }\r\n\r\n    resetAllNodeRules() {\r\n        this.grid.playerPositions = []\r\n        const grid = this.grid.grid;\r\n        for (let y = 0; y < this.grid.height; y++) {\r\n            for (let x = 0; x < this.grid.width; x++) {\r\n                for (let i = 0; i < grid[y][x].nodes.length; i++) {\r\n                    const node = grid[y][x].nodes[i]\r\n                    node.isPlayer = false;\r\n                    node.isPushable = false;\r\n                    node.rules = [];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addRule(rule:string) {\r\n        this.rules.push(rule);\r\n    }\r\n}","import Canvas, {Drawing} from \"./Canvas\";\r\nimport Tile, {Node, objectColors, objectsWithDirections, objectsWithWalking} from \"./Node\";\r\nimport Rules from \"./rules\";\r\n\r\nclass AnimatedImage extends Drawing {\r\n    public currentDirection: number = 0;\r\n    public lastDirection: number = 1;\r\n    public extraWalking: number = 3;\r\n\r\n    public imageName: string;\r\n\r\n    public drawings: Array<Array<any>> = []\r\n\r\n    public x: number = 0;\r\n    public xLastFrame: number = 0;\r\n    public y: number = 0;\r\n    public yLastFrame: number = 0;\r\n\r\n    public offset!: { x: number; y: number };\r\n    private readonly resolution: number;\r\n    private hasWalking: boolean = false;\r\n    private hasDirections: boolean = false;\r\n    private paletteData!: ImageData;\r\n\r\n    constructor(canvas: Canvas, imageName: string, resolution: number) {\r\n        super(canvas, false);\r\n        this.imageName = imageName;\r\n        this.resolution = resolution;\r\n        this.initializeDrawings()\r\n    }\r\n\r\n    initializeDrawings() {\r\n        this.hasDirections = objectsWithDirections.indexOf(this.imageName) !== -1\r\n        this.hasWalking = objectsWithWalking.indexOf(this.imageName) !== -1\r\n\r\n        if(this.hasDirections) {\r\n            this.currentDirection = 24;\r\n        }\r\n        if(this.hasWalking) {\r\n            this.currentDirection = 27;\r\n        }\r\n\r\n        // Give drawings a proper length to assign to\r\n        for (let j = 0; j < this.currentDirection+1; j++) {\r\n            this.drawings[j] = [];\r\n            for (let i = 1; i < 4; i++) {\r\n                this.drawings[j][i] = undefined;\r\n            }\r\n        }\r\n\r\n        // load the palette of colors\r\n        let palette = new Image(7,5)\r\n        palette.src = process.env.PUBLIC_URL+\"/img/Palettes/default.png\"\r\n        palette.onload = () => {\r\n            for (let j = 0; j < this.currentDirection+1; j++) {\r\n                for (let i = 1; i < 4; i++) {\r\n\r\n                    // load image from public folder\r\n                    let img = new Image(24,24);\r\n                    if(objectsWithWalking.indexOf(this.imageName) !== -1) {\r\n                        img.src = process.env.PUBLIC_URL+\"/img/\"+this.imageName + \"/\" + this.imageName + \"_\" + j + \"_\" + i + '.png'\r\n                    } else if (this.imageName.includes('text')) {\r\n                        img.src = process.env.PUBLIC_URL+\"/img/texts/\" + this.imageName + \"_\" + j + \"_\" + i + '.png'\r\n                    } else {\r\n                        img.src = process.env.PUBLIC_URL+\"/img/objects/\" + this.imageName + \"_\" + j + \"_\" + i + '.png'\r\n                    }\r\n\r\n                    // get the palette image data\r\n                    let canvas = document.createElement('canvas');\r\n                    let ctx = canvas.getContext('2d');\r\n                    if(ctx !== null) {\r\n                        ctx.drawImage(palette, 0, 0, palette.width,palette.height)\r\n                        this.paletteData = ctx.getImageData(0,0, palette.width,palette.height)\r\n                    }\r\n\r\n                    // when image is loaded change it's color to correct color\r\n                    img.onload = () => {\r\n                        let canvas = document.createElement('canvas');\r\n                        let ctx = canvas.getContext('2d');\r\n                        if(ctx !== null) {\r\n                            ctx.imageSmoothingEnabled = false\r\n\r\n                            // get image data to change\r\n                            ctx.drawImage(img, 0, 0, this.resolution-2, this.resolution-2)\r\n                            const imageData = ctx.getImageData(0,0,this.resolution-2, this.resolution-2)\r\n                            let imgData = imageData.data;\r\n\r\n                            // get x and y for index of the palette data. \"<< 2\" does something * 4 but faster\r\n                            const x = objectColors[this.imageName].x;\r\n                            const y = objectColors[this.imageName].y;\r\n                            const posForColor = (y * 7 + x) << 2;\r\n\r\n                            // change the whites of the image to the palette color\r\n                            for (let i =0; i < imgData.length; i += 4) {\r\n                                if(imgData[i] === 255) {\r\n                                    imgData[i] = this.paletteData.data[posForColor]\r\n                                    imgData[i+1] = this.paletteData.data[posForColor+1]\r\n                                    imgData[i+2] = this.paletteData.data[posForColor+2];\r\n                                }\r\n                            }\r\n\r\n                            // change image data to canvas for easy drawing\r\n                            let canvas2 = document.createElement(\"canvas\")\r\n                            canvas2.width = imageData.width;\r\n                            canvas2.height = imageData.height;\r\n                            let ctx2 = canvas2.getContext(\"2d\")\r\n                            if(ctx2 !== null) {\r\n                                ctx2.putImageData(imageData, 0, 0)\r\n                            }\r\n\r\n                            this.drawings[j][i] = canvas2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        // if there is no drawing don't try to draw the image and crash\r\n        if(this.drawings[this.currentDirection][this.currentFrame] === undefined) return;\r\n\r\n        if(this.imageName === \"keke\") {\r\n            console.log('keke')\r\n        }\r\n\r\n        // set the currentDirection for objects that have more than 1 direction like the skull\r\n        if(this.hasDirections) {\r\n            this.currentDirection = this.lastDirection === 0? 8 : this.lastDirection === 1 ? 0 : this.lastDirection === 2 ? 24 : this.lastDirection === 3 ? 16 : 0;\r\n        }\r\n        // set the currentDirection for objects that have walking animation\r\n        if(this.hasWalking) {\r\n            this.currentDirection = this.lastDirection === 0? 8 : this.lastDirection === 1 ? 0 : this.lastDirection === 2 ? 24 : this.lastDirection === 3 ? 16 : 0;\r\n            if(this.x !== this.xLastFrame || this.y !== this.yLastFrame) {\r\n                if(this.extraWalking !== 3) {\r\n                    this.extraWalking += 1;\r\n                } else {\r\n                    this.extraWalking = 0;\r\n                }\r\n            }\r\n            this.currentDirection += this.extraWalking;\r\n        }\r\n\r\n\r\n        // if there is no drawing don't try to draw the image and crash\r\n        if(this.drawings[this.currentDirection][this.currentFrame] === undefined) return;\r\n\r\n        this.ctx.drawImage(this.drawings[this.currentDirection][this.currentFrame], this.x*this.resolution+this.offset.x+1,this.y*this.resolution+this.offset.y+1, this.resolution-2, this.resolution-2);\r\n\r\n        this.xLastFrame = this.x;\r\n        this.yLastFrame = this.y;\r\n    }\r\n}\r\n\r\nexport default class Grid extends Drawing {\r\n    public width: number\r\n    public height: number\r\n\r\n    public resolution: number\r\n\r\n    public grid: Array<Array<Tile>> = [];\r\n    private offset!: { x: number; y: number };\r\n\r\n    public playerPositions: Array<{ x: number; y: number, skip: boolean }> = [];\r\n\r\n    private drawings: {[key: string]: AnimatedImage} = {}\r\n\r\n    private gridImage: any;\r\n\r\n    public active: boolean = true;\r\n\r\n    public undoMoves: Array<Array<{node:Node, xP: number; yP: number, doAction: boolean}>> = [];\r\n    public undoActions: Array<{node: Node, changeTo: any, changeOn: number}> = [];\r\n\r\n    public doAfterMove: Array<{node: Node, newObjectName: string}> = []\r\n\r\n    public undoStep = 0;\r\n    public rules: Rules = new Rules(this);\r\n\r\n    public didMoveThisStep: boolean = false;\r\n\r\n    getDrawing(key: string) {\r\n        if(!(key in this.drawings)) {\r\n            this.drawings[key] = new AnimatedImage(this.canvas, key, this.resolution);\r\n        }\r\n        return this.drawings[key]\r\n    }\r\n\r\n    constructor(canvas: Canvas, width: number, height: number, resolution: number) {\r\n        super(canvas)\r\n        this.width = width;\r\n        this.height = height;\r\n        this.resolution = resolution;\r\n        this.loadAllImages()\r\n        this.setOffset()\r\n        this.initializeGrid(width, height)\r\n        this.initializeDrawings();\r\n        this.rules.updateRules()\r\n        this.canvas.canvas.addEventListener('click', this.calculateText.bind(this));\r\n    }\r\n\r\n    loadAllImages() {\r\n        for (const key of Object.keys(objectColors)) {\r\n            this.drawings[key] = new AnimatedImage(this.canvas, key, this.resolution)\r\n        }\r\n    }\r\n\r\n    setOffset() {\r\n        this.offset = {x:window.innerWidth/2-(this.width/2*this.resolution), y:window.innerHeight/2-(this.height/2*this.resolution)}\r\n    }\r\n\r\n    initializeDrawings() {\r\n        this.gridImage = this.drawGrid()\r\n    }\r\n\r\n    initializeGrid(width:number, height:number) {\r\n        for (let y = 0; y < height; y++) {\r\n            const currentY = []\r\n            for (let x = 0; x < width; x++) {\r\n                currentY.push(new Tile(x,y))\r\n            }\r\n            this.grid.push(currentY)\r\n        }\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                if((x===5 && y===5)) {\r\n                    this.grid[y][x].nodes.push(new Node(x,y,\"\", 'babu'))\r\n                }\r\n                if((x===7 && y===5)) {\r\n                    this.grid[y][x].nodes.push(new Node(x,y,\"\", 'wall'));\r\n                    // this.grid[y][x].nodes.push(new Node(x,y,\"\", 'me'))\r\n                }\r\n\r\n                if((x===3 && y===3)) {\r\n                    this.grid[y][x].nodes.push(new Node(x,y,\"babu\"))\r\n                }\r\n                if((x===4 && y===3)) {\r\n                    this.grid[y][x].nodes.push(new Node(x,y,\"is\"))\r\n                }\r\n                if((x===5 && y===3)) {\r\n                    this.grid[y][x].nodes.push(new Node(x,y,\"you\"))\r\n                }\r\n                //\r\n                // if((x===7 && y===4)) {\r\n                //     this.grid[y][x].nodes.push(new Node(x,y,\"keke\"))\r\n                // }\r\n                // if((x===7 && y===6)) {\r\n                //     this.grid[y][x].nodes.push(new Node(x,y,\"me\"))\r\n                // }\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateText(e: any) {\r\n        const posX = e.clientX - this.offset.x;\r\n        const posY = e.clientY - this.offset.y;\r\n        const gridPos = {x: Math.floor(posX/this.resolution), y: Math.floor(posY/this.resolution)}\r\n        if(gridPos.x < 0 || gridPos.x >= this.width || gridPos.y < 0 || gridPos.y >= this.height) {\r\n            return;\r\n        }\r\n        const text = prompt(\"Give a text value.\")\r\n        if(text !== null) {\r\n            this.grid[gridPos.y][gridPos.x].nodes.push(new Node(gridPos.x,gridPos.y,text))\r\n        }\r\n        this.rules.updateRules();\r\n    }\r\n\r\n    //#region moving\r\n\r\n    doMovement() {\r\n        let movedNodes = []\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (const node of this.grid[y][x].nodes) {\r\n                    if(node.is(\"move\")) {\r\n                        let xyP = node.directionToXAndY(node.lastDirection())\r\n                        if(!this.canMoveIntoNode(node, xyP.xP, xyP.yP)) {\r\n                            xyP = {xP:-xyP.xP, yP:-xyP.yP}\r\n                        }\r\n                        movedNodes.push({node:node, xP:xyP.xP, yP:xyP.yP})\r\n                    }\r\n                    if(node.is(\"defeat\")) {\r\n                        if(this.grid[y][x].nodes.some(value => value.isPlayer)) {\r\n                            for (const playerNode of this.grid[y][x].nodes.filter(value => value.isPlayer)) {\r\n                                this.undoActions.push({node: playerNode, changeTo: playerNode.objectName, changeOn: this.undoStep+1})\r\n                                playerNode.objectName = \"\";\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const movedNode of movedNodes) {\r\n            this.moveNode(movedNode.node, movedNode.xP, movedNode.yP)\r\n        }\r\n    }\r\n\r\n    canMoveIntoNode(node:Node, xP:number, yP:number) {\r\n        const grid = this.grid;\r\n\r\n        const x = node.x;\r\n        const y = node.y;\r\n        // return if coords out of bounds\r\n        if(x+xP < 0 || x+xP > this.width-1 || y+yP < 0 || y+yP > this.height-1) return false;\r\n        for (let i = 0; i < grid[y+yP][x+xP].nodes.length; i++) {\r\n            const nextNode = grid[y+yP][x+xP].nodes[i];\r\n            if(nextNode.isPushable) {\r\n                // return if coords out of bounds\r\n                if(nextNode.x+xP < 0 || nextNode.x+xP > this.width-1 || nextNode.y+yP < 0 || nextNode.y+yP > this.height-1) return false;\r\n\r\n                // if next tile empty you can move\r\n                if(grid[nextNode.y+yP][nextNode.x+xP].nodes.length === 0) {\r\n                    this.moveNode(nextNode, xP,yP)\r\n                    return true;\r\n                }\r\n                for (let j = 0; j < grid[nextNode.y+yP][nextNode.x+xP].nodes.length; j++) {\r\n                    if(this.canMoveIntoNode(nextNode, xP, yP)) {\r\n                        this.moveNode(nextNode, xP,yP)\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            } else if(nextNode.is('stop')) {\r\n                return false\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    moveNode(node: Node, xP:number, yP:number, skipMoveCheck:boolean = false, skipAddUndoCheck:boolean = false, reverseDirection:boolean = false): boolean {\r\n\r\n        if(!skipMoveCheck && !this.canMoveIntoNode(node, xP, yP)) {\r\n            return false;\r\n        }\r\n\r\n        const curTile = this.grid[node.y][node.x];\r\n        const nextTile = this.grid[node.y+yP][node.x+xP];\r\n\r\n        node.x += xP;\r\n        node.y += yP;\r\n\r\n        if(reverseDirection) {\r\n            node.xP = -xP\r\n            node.yP = -yP;\r\n        } else {\r\n            node.xP = xP\r\n            node.yP = yP;\r\n        }\r\n\r\n        nextTile.nodes.push(node);\r\n        curTile.nodes.splice(curTile.nodes.indexOf(node), 1);\r\n\r\n        // Undo moves\r\n        if(!skipAddUndoCheck) {\r\n            this.didMoveThisStep = true;\r\n            if(this.undoMoves.length-1 !== this.undoStep) {\r\n                this.undoMoves.push([]);\r\n            }\r\n            this.undoMoves[this.undoStep].push({node:nextTile.nodes[nextTile.nodes.findIndex(value => value === node)], xP: -xP,yP: -yP, doAction:false});\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region drawing\r\n\r\n    draw() {\r\n        if(!this.active) return;\r\n        this.ctx.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height)\r\n        this.ctx.imageSmoothingEnabled = false\r\n\r\n        this.ctx.drawImage(this.gridImage, this.offset.x, this.offset.y)\r\n        for (let y = 0; y < this.height; y++) {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let j = 0; j < this.grid[y][x].nodes.length; j++){\r\n                    const node = this.grid[y][x].nodes[j];\r\n                    if(node.objectName !== \"\") {\r\n                        const drawing = this.getDrawing(node.objectName);\r\n                        drawing.x = x;\r\n                        drawing.y = y;\r\n                        drawing.lastDirection = node.lastDirection();\r\n                        drawing.offset = this.offset;\r\n                        drawing.draw()\r\n                    }\r\n                    if(node.isText) {\r\n                        const drawing = this.getDrawing(\"text_\"+node.text);\r\n                        drawing.x = x;\r\n                        drawing.y = y;\r\n                        drawing.offset = this.offset;\r\n                        drawing.draw()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawGrid() {\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const resolution = this.resolution;\r\n\r\n        const canvas = document.createElement('canvas')\r\n        canvas.width = width*resolution\r\n        canvas.height = height*resolution\r\n        const ctx = canvas.getContext('2d');\r\n        if(ctx) {\r\n            ctx.beginPath();\r\n            for (let x = 0; x < width; x++) {\r\n                ctx.moveTo(x*resolution, 0);\r\n                ctx.lineTo(x*resolution, height*resolution);\r\n            }\r\n            ctx.stroke();\r\n            ctx.beginPath();\r\n            for (let y = 0; y < width; y++) {\r\n                ctx.moveTo(0, y*resolution);\r\n                ctx.lineTo(width*resolution, y*resolution);\r\n            }\r\n            ctx.stroke();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(width*resolution, 0);\r\n            ctx.lineTo(width*resolution, height*resolution);\r\n            ctx.stroke();\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, height*resolution);\r\n            ctx.lineTo(width*resolution, height*resolution);\r\n            ctx.stroke();\r\n\r\n        }\r\n        return canvas;\r\n    }\r\n\r\n    //#endregion\r\n}","import React, {Component} from \"react\";\r\nimport \"./Game.css\"\r\nimport Canvas from \"./Canvas\";\r\nimport Grid from \"./Grid\";\r\n\r\nexport default class Game extends Component {\r\n    private canvas!: Canvas | null;\r\n    private grid!:Grid;\r\n    private canMove: boolean = true;\r\n    private justUndone: boolean = false;\r\n    private interval!: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.canvas) {\r\n            this.grid = new Grid(this.canvas, 10, 10, 70);\r\n            window.addEventListener(\"resize\", this.grid.setOffset.bind(this.grid))\r\n            window.addEventListener('keydown',this.keyDetectDown.bind(this),false);\r\n            window.addEventListener('keyup',this.keyDetectUp.bind(this),false);\r\n        }\r\n    }\r\n\r\n    movePlayers(xP:number, yP:number) {\r\n        if(!this.canMove) return;\r\n        if(this.grid.playerPositions.length !== 0) {\r\n            this.grid.undoMoves.length = this.grid.undoStep;\r\n            if (this.grid.undoMoves.length > 50) {\r\n                this.grid.undoMoves.shift();\r\n                this.grid.undoStep--\r\n            }\r\n            let doExtra = 0;\r\n            for (const pos of this.grid.playerPositions) {\r\n                if (pos.skip) {\r\n                    pos.skip = false;\r\n                    continue\r\n                }\r\n                const findPlayerNode = this.grid.grid[pos.y][pos.x].nodes.find(v => v.isPlayer);\r\n                if(findPlayerNode != null) {\r\n                    if(!this.grid.moveNode(findPlayerNode, xP, yP)) doExtra++;\r\n                    pos.skip = false;\r\n                }\r\n            }\r\n            this.grid.doMovement();\r\n            this.grid.rules.updateRules()\r\n            let howManyRulesNotYou = 0;\r\n            for (const rule of this.grid.rules.rules) {\r\n                if(rule.split(\" \")[2] !== \"you\") {\r\n                    howManyRulesNotYou++;\r\n                }\r\n            }\r\n\r\n            if(doExtra !== this.grid.playerPositions.length || howManyRulesNotYou === this.grid.rules.rules.length || this.grid.didMoveThisStep) {\r\n                this.grid.undoStep++\r\n                this.grid.didMoveThisStep = false;\r\n            }\r\n\r\n            if(this.grid.doAfterMove.length !== 0) {\r\n                for (const doAfterMove of this.grid.doAfterMove) {\r\n                    doAfterMove.node.objectName = doAfterMove.newObjectName;\r\n                }\r\n                this.grid.rules.resetAllNodeRules()\r\n            }\r\n            this.grid.rules.updateRules()\r\n\r\n            this.canMove = false;\r\n\r\n            setTimeout(() => {\r\n                this.canMove = true\r\n            }, 100)\r\n        }\r\n    }\r\n\r\n    undoMoves() {\r\n        if(this.grid.undoStep-1 < 0) return;\r\n        this.canMove = false\r\n        if(this.grid.undoMoves.length < this.grid.undoStep) {\r\n            console.error(\"Could not do undo with: \" + this.grid.undoMoves + \" and \" + this.grid.undoStep);\r\n            return\r\n        }\r\n        const undoMoves = this.grid.undoMoves[this.grid.undoStep-1].slice()\r\n        for (let i = undoMoves.length-1; i >= 0; i--) {\r\n            const undoMove = undoMoves[i]\r\n            this.grid.moveNode(undoMove.node, undoMove.xP, undoMove.yP,false,true, true)\r\n            for (const undoAction of this.grid.undoActions) {\r\n                if(undoAction.changeOn === this.grid.undoStep) {\r\n                    undoAction.node.objectName = undoAction.changeTo;\r\n                    this.grid.doAfterMove = []\r\n                }\r\n            }\r\n        }\r\n        this.grid.rules.updateRules()\r\n        this.grid.undoStep--;\r\n        this.justUndone = true;\r\n        this.canMove = true;\r\n    }\r\n    \r\n    keyDetectDown(e: KeyboardEvent) {\r\n        if(e.repeat) return;\r\n        if(this.interval !== undefined) return;\r\n        if(e.key === \"w\") {\r\n            this.movePlayers(0,-1)\r\n            this.interval = setInterval(() => this.movePlayers(0,-1), 150)\r\n        }\r\n        else if(e.key === \"a\") {\r\n            this.movePlayers(-1,0)\r\n            this.interval = setInterval(() => this.movePlayers(-1,0), 150)\r\n        } else if(e.key === \"s\") {\r\n            this.movePlayers(0,1)\r\n            this.interval = setInterval(() => this.movePlayers(0,1), 150)\r\n        } else if(e.key === \"d\") {\r\n            this.movePlayers(1,0)\r\n            this.interval = setInterval(() => this.movePlayers(1,0), 150)\r\n        }\r\n        else if(e.key === \"z\") {\r\n            this.undoMoves();\r\n            this.interval = setInterval(() => this.undoMoves(), 200)\r\n        }\r\n    }\r\n    keyDetectUp(e: KeyboardEvent) {\r\n        if(e.repeat) return;\r\n        clearInterval(this.interval)\r\n        this.interval = undefined\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <button style={{position: \"absolute\", top: \"10px\"}} onClick={() => console.log(this.grid)}>Grid</button>\r\n                <div id={\"rules-text\"} style={{position: \"absolute\", top: \"10px\", left: \"10px\", textAlign: \"left\"}}/>\r\n                <Canvas ref={el => this.canvas = el}/>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Game from \"./Game/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Game/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}